openapi: 3.0.0
info:
  title: DynamicTN
  version: 1.0.0
  description: DynamicTN is a project that aim to create a platform to expose and share your improvement suggestions over the city of Trento
servers:
  - url: http://localhost:3000
    description: development server
tags:
  - name: User
    description: API endpoint to manage users
  - name: Post
    description: API endpoint to manage posts
  - name: Comment
    description: API endpoint to manage comments
  - name: Auth
    description: API endpoint to manage login
paths:
  /users:
    post:
      summary: Create a new user
      tags: [ User ]
      requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      responses:
          201:
            description: The user was successfully created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          500:
            description: Some server error
          409:
            description: conflict, the user already exists
    get:
      summary: Returns the list of all the users
      tags: [ User ]
      responses:
        200:
          description: The list of the users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{id}:
    delete:
      summary: Remove the user by id
      tags: [ User ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The user id
      responses:
        200:
          description: The user was deleted
        500:
          description: fatal error
  /users/{email}:
    get:
      summary: get the user with the email
      tags: [ User ]
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: the user email
      responses:
        200:
          description: the user with that email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: not found
        500:
          description: fatal error
  /posts:
    get:
      summary: Returns the list of all the posts
      tags: [ Post ]
      responses:
        200:
          description: The list of the posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        404:
          description: seems empty :(
        500:
          description: fatal error
    post:
      summary: Create a new post
      tags: [ Post ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        201:
          description: The post was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        500:
          description: Some server error
  /posts/{id}:
    get:
      summary: get the post with the id
      tags: [ Post ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: the post id
      responses:
        200:
          description: the post with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: not found
        500:
          description: fatal error
    patch:
      summary: Update the post by the id
      tags: [ Post ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The post id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        200:
          description: The post was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        500:
          description: Some error happened
    delete:
      summary: Remove the post by id
      tags: [ Post ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The post id
      responses:
        204:
          description: The post was deleted
        500:
          description: fatal error
  /comments:
    get:
      summary: Returns the list of all the comments
      tags: [ Comment ]
      responses:
        200:
          description: The list of the comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        500:
          description: fatal error
    post:
      summary: Create a new comment
      tags: [ Comment ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        201:
          description: The comment was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        500:
          description: Some server error
        404:
          description: post not found
  /comments/{id}:
    get:
      summary: get the comment with the id
      tags: [ Comment ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: the comment id
      responses:
        200:
          description: the comment with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: comment not found
        500:
          description: fatal error
    put:
      summary: Update the comment by the id
      tags: [ Comment ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The comment id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        200:
          description: The comment was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        500:
          description: Some error happened
    delete:
      summary: Remove the comment by id
      tags: [ Comment ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The comment id
      responses:
        204:
          description: The comment was deleted
        500:
          description: fatal error
  /auth:
    post:
      summary: Perform the user login
      tags: [ Auth ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        200:
          description: Auth success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        500:
          description: Some server error
        401:
          description: Auth failed
components:
  schemas:
    User:
      type: object
      required:
        - email
        - password
      description: the user model of the system
      properties:
        email:
          type: string
          description: Email address of the user
        password:
          type: string
          description: Password of the user
      example:
        email: example@example.com
        password: examplePassword
    Post:
      type: object
      required:
        - name
        - text
      description: ''
      properties:
        name:
          type: string
          description: the name of the post
        text:
          type: string
          description: the text of the post
        postImage:
          type: string
          description: the image of the post
      example:
        name: examplePostTitle
        text: examplePostText
        postImage: exampleImageUrl
    Comment:
      type: object
      required:
        - post
        - text
      description: creating a comment linked to one post, use postId
      properties:
        post:
          type: mongoose.Schema.Types.ObjectId
          description: the link at its post
        text:
          type: string
          description: the text of the comment
      example:
        post: examplePostId
        text: exampleCommentText
    Auth:
      type: object
      required:
        - email
        - password
      description: a "fake" model used to perform login remaining in a RESTful logic
      properties:
        email:
          type: string
          description: Email address of the user
        password:
          type: string
          description: Password of the user
      example:
        email: example@example.com
        password: examplePassword
